/*
0. 실행 컨텍스트

js 프로그램은 실행할 코드에 제공할 환경 정보들을 모아 실행 컨텍스트를 만들고
이를 콜 스택에 쌓아 올렸다가 콜 스택 가장 위에 쌓여 있는 컨텍스트와 관련 있는 코드들을 실행하는 식으로 
전체 코드의 환경과 순서를 보장함. 일반적으로 실행 컨텍스트를 구성하는 방법은 함수를 실행하는 것뿐이며,
실행 컨텍스트가 수집하는 정보는 VariableEnvironment(현재 컨텍스트 내의 식별자들에 대한 정보 담김), 
LexicalEnvironment(변경 사항이 실시간으로 반영되는 정보 담김), ThisBinding(this 식별자가 바라보는 대상).
/*

1. 호이스팅

실행 컨텍스트가 실행되기 전에, 컨텍스트 내부 전체를 처음부터 끝까지 순서대로 식별자들을 수집하는 호이스팅이 일어남.
호이스팅은 var 변수 선언과 함수선언문에서만 일어나며, 코드 가독성과 유지보수 위해 가급적이면 호이스팅 일어나지 않게 함.
-->되도록 let/const 사용, 함수와 변수를 코드 상단부에서 선언 
*/

/*
2. 스코프와 스코프체인

스코프 : 식별자에 대한 유효 범위 (전역 변수, 지역 변수)
스코프 체인 : 스코프 체인 식별자의 유효범위를 안에서부터 바깥으로 차례로 검색해 나가는 것.
함수 호출 시가 아닌, 선언 시에 스코프 생성됨
*/

var name = 'zero';
function log(){
    console.log(name);
}

function wrapper(){
    var name = 'nero';
    log();
}
wrapper(); //zero 출력


/*
3. this

전역함수, 내부함수, 메소드 내부함수, 콜백함수 모두 기본적으로 this는 전역 객체에 바인딩 됨.
함수가 객체의 속성 값이면 메소드로서 호출되는데, 이때 메소드 내부의 this는 해당 메소드를 소유한 객체에 바인딩 됨.
프로토타입 객체도 메소드 가질 수 있고, 그 안에서 사용된 this도 마찬가지로 메소드 소유한 객체에 바인딩 됨.
new 키워드 써서 생성자 함수로 동작하게 만들면 빈 객체 생성하고 this로 바인딩한 후 this를 통해 프로퍼티를 생성하고, 생성된 객체를 반환.

-명백한 바인딩
Function.prototype.apply, Function.prototype.call, Function.prototype.bind 메소드
이용해 this를 특정 개체에 명시적으로 바인딩 할 수 있음.
*/

function foo(){
    console.log(this.age); //undefined
    this.age = 100; // 생성된 빈 객체어 this를 사용해 프로퍼티 추가
    console.log(this.age); //100
}

new foo(); //생성자 함수로 사용됨. 빈 객체 생성 후 this로 바인딩


/*
4. 콜백함수

자바 스크립트 함수에는 선언 함수, 익명 함수가 있고 보통 콜백함수는 익명함수로 사용됨.
자바 스크립트에서 비동기적 프로그래밍을 하여 싱글 스레드가 논블로킹으로 작동하게 하기 위해 콜백함수를 사용함.
어떤 이벤트가 발생했거나 특정 시점에 도달했을 때 시스템에서 호출하는 함수가 콜백 함수.

콜백함수는 다른 코드에게 인자와 제어권을 함께 넘겨주게 됨. 콜백함수를 위임받은 코드는
호출하는 시점, 인자의 순서, this 지정에 대한 제어권을 가지게 됨. 콜백함수는 함수이기 때문에 인자로 메서드를 전달하더라도 함수로 실행됨.
*/